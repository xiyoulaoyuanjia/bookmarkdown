简介
=============

It’s 8:15 p.m. on a Friday night in a tiny apartment building in Seoul, South Korea. Byung-Soon,
an expert in the electronic theft of corporate information, is exploiting a well-known Internet
Information Services (IISa) vulnerability on an American Web server in San Francisco, California.
After spending weeks of careful reconnaissance against servers in his target’s DMZ, he has finally
found a way in through a well-known Microsoft IIS 6.0 vulnerability that, left unpatched, has
provided him full access to the server. The target is a medium-sized consultancy firm that is
known to do business with a large defense contractor who designs, among other things, ballistic
missiles for sale to the United States military.


Byung-Soon begins searching through the various Web directories on the server and
notices that an intranet site has been set up so that consultants within the firm can log their
hours for work performed at the defense contractor. He downloads the index page for the
intranet site and includes some malicious JavaScript that, when run, connects to a previously
exploited system in India and downloads his rootkit. The rootkit, invisible to the user and other
system processes, acts as a key-logger to record user keystrokes and enables Byung-Soon to
connect directly to the compromised host through an encrypted remote access connection.
After modifying the index page, he uploads his modified copy, removes any log entries
generated by his actions, and heads out for a late dinner. In four hours, when the consultants
start their day, Byung-Soon’s plan begins.


Bob, a senior consultant assigned to the defense contract, logs in to the company intranet to
start his day. Although this is the most boring part of his day, he knows he must keep an accurate
count of the hours spent on this project so that his company, and of course he, gets paid.
The process goes like clockwork, as it does every day, and Bob, like several of his coworkers,
unwittingly installs Byung-Soon’s rootkit. When he finishes with the intranet page, he launches
Eclipse, the development platform the defense contractor uses for development of software,
and starts working. The rootkit records all of Bob’s keystrokes, including usernames, passwords,
and server information, as it is designed to do. At random intervals throughout the day,
Byung-Soon’s rootkit sends out snippets of logged information to a collection of previously
exploited servers located all over the world.


On Monday, Byung-Soon wakes up in his tiny apartment in Seoul and decides to check
on his progress. He logs in to an exploited box at a university in Italy and executes a script to
pull all the pieces of collected information together. He then pulls the compiled information
down to another server in Warsaw, Poland and starts parsing the information for keywords
provided by his employer. Luckily, the developers provide extensive comments within their
code so Byung-Soon’s script is able to easily identify the target code. The code belongs to
Bob Johnson, one of the contractors whose system has a certain rootkit installed. Byung-Soon
decides that it is time to connect to this system and finish the job he was hired to do.


This story, although fictional, is entirely possible and might be happening to your
organization right now. By adding a host-based intrusion detection system (HIDS) to your
servers and workstations, this embarrassing and potentially dangerous scenario, can be completely
avoided. If an HIDS solution was installed on the compromised Web server, the remote access
connection, file changes, and removal of the logs to cover Byung-Soon’s tracks could have
been logged, and potentially blocked, depending on the type of HIDS. If each client machine
had an HIDS solution installed, the rootkit download, installation, and communications could
have also been logged and blocked.

